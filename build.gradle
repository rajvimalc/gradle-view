apply plugin: 'java'
apply plugin: 'idea'

sourceCompatibility = JavaVersion.VERSION_1_8
targetCompatibility = JavaVersion.VERSION_1_8

group = 'com.github.rholder'
version = '4.0.0'

allprojects {
    repositories {
        maven {
            url 'http://repo.gradle.org/gradle/libs-releases-local'
        }
        mavenCentral()
    }
}

configurations {
    provided
}

idea.module.scopes.COMPILE.plus += [configurations.provided]

sourceSets.main {
    compileClasspath += configurations.provided
}

jar {
    into('META-INF') {
        from 'META-INF/plugin.xml'
        from 'LICENSE'
    }
    into('') {
        // well this is wonky...
        from 'gradle-acumen/build/libs/gradle-acumen-0.3.0.jar'
    }
}

dependencies {
    compile "org.gradle:gradle-tooling-api:${gradleToolingApiVersion}"
    compile 'com.google.guava:guava:28.1-jre'
    compile 'commons-io:commons-io:2.6'
    compile 'commons-lang:commons-lang:2.6'

    runtime 'org.slf4j:slf4j-simple:2.0.0-alpha1'

    // IntelliJ plugin runtime libraries, since they're not available from a convenient repo
    provided files('intellij/extensions-135.690.jar')
    provided files('intellij/openapi-135.690.jar')
    provided files('intellij/util-135.690.jar')

    // force this project to build before assembling jar so we can stuff it in there
    provided project(':gradle-acumen')

    // just need the api jar
    compile(project(':gradle-acumen-api')) {
        transitive = false
    }
}

// ensure our project type is set to IntelliJ plugin
idea.module {
    jdkName = ideaPluginJdkName
    iml {
        withXml {
            def node = it.asNode()
            node.attributes().put('type','PLUGIN_MODULE')
        }
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs << '-Xlint:deprecation'
    options.deprecation = true
}

task distPlugin(type: Zip, dependsOn: jar) {
    description = "Generate the IntelliJ plugin archive from the current project."
    group = "Distribution"
    into("${project.name}/lib") {
        from jar.archiveFile
        from configurations.runtime
    }
}
